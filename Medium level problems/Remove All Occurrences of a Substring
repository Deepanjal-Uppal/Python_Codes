# PROBLEM:

# Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:

# Find the leftmost occurrence of the substring part and remove it from s.
# Return s after removing all occurrences of part.

# A substring is a contiguous sequence of characters in a string.

# Example:

# Input: s = "daabcbaabcbc", part = "abc"
# Output: "dab"
# Explanation: The following operations are done:
# - s = "daabcbaabcbc", remove "abc" starting at index 2, so s = "dabaabcbc".
# - s = "dabaabcbc", remove "abc" starting at index 4, so s = "dababc".
# - s = "dababc", remove "abc" starting at index 3, so s = "dab".
# Now s has no occurrences of "abc".

# SOLUTION:

class Solution:
    def removeOccurrences(self, s: str, part: str) -> str:
        stack = []

        for curr in s:
            stack.append(curr)
            if len(stack) >= len(part):
                temp = stack[-len(part):] #get last len(part) characters
                if "".join(temp) == part:
                    for _ in range(len(part)):
                        stack.pop()

        return "".join(stack)
